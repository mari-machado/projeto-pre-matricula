// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Genero {
  MASCULINO
  FEMININO
}

enum EstadoCivil {
  SOLTEIRO
  CASADO
  DIVORCIADO
  SEPARADO
  VIUVO
  UNIAO_ESTAVEL
}

enum UF {
  AC 
  AL 
  AP 
  AM 
  BA 
  CE 
  DF 
  ES 
  GO 
  MA 
  MT 
  MS 
  MG 
  PA 
  PB 
  PR
  PE 
  PI 
  RJ 
  RN
  RS 
  RO
  RR 
  SC 
  SP 
  SE 
  TO 
}

enum MatriculaStatus {
  PENDENTE
  INTEGRADA
  CANCELADA
}

model Endereco {
  id          String @id @default(uuid())
  cep         String @db.VarChar(9)
  rua         String @db.VarChar(255)
  numero      String @db.VarChar(10)
  complemento String? @db.VarChar(100)
  cidade      String @db.VarChar(100)
  uf          UF?
  bairro      String @db.VarChar(100)
  
  criadoEm      DateTime @default(now()) @map("criado_em")
  atualizadoEm  DateTime @updatedAt @map("atualizado_em")
  
  responsaveis  Responsavel[]
  
  @@map("enderecos")
}

model Responsavel {
  id            String      @id @default(uuid())
  nome          String      @db.VarChar(255)
  genero        Genero
  dataNascimento DateTime   @map("data_nascimento") @db.Date
  estadoCivil   EstadoCivil? @map("estado_civil")
  rg            String      @db.VarChar(20) @unique
  orgaoExpeditor String? 
  dataExpedicao DateTime?
  cpf           String      @db.VarChar(14) @unique
  pessoaJuridica Boolean   @default(false) @map("pessoa_juridica")
  
  celular           String  @db.VarChar(15) 
  email             String  @db.VarChar(255) @unique
  financeiro        Boolean @default(false)
  
  enderecoId        String  @map("endereco_id")
  endereco          Endereco @relation(fields: [enderecoId], references: [id])

  etapaAtual       Int       @default(1) @map("etapa_atual")
  
  criadoEm          DateTime @default(now()) @map("criado_em")
  atualizadoEm      DateTime @updatedAt @map("atualizado_em")
  ativo             Boolean  @default(true)
  
  alunos            Aluno[]
  matriculas        Matricula[]
  matriculasSegundoResponsavel Matricula[] @relation("MatriculaSegundoResponsavel")
  alunoResponsaveis AlunoResponsavel[]
  
  @@map("responsaveis")
}

model Aluno {
  id               String    @id @default(uuid())
  nome             String    @db.VarChar(255)
  genero           Genero
  nacionalidade    String?   @db.VarChar(100)
  dataNascimento   DateTime  @map("data_nascimento") @db.Date
  cidadeNatal      String    @map("cidade_natal") @db.VarChar(100)
    estadoCivil     EstadoCivil? @map("estado_civil")
  cpf              String   @db.VarChar(14) @unique

  telefone         String    @db.VarChar(15) 
  celular          String    @db.VarChar(15) 
  whatsapp         String    @db.VarChar(15)
  email            String    @db.VarChar(255)

  cep         String? @db.VarChar(9)
  rua         String? @db.VarChar(255)
  numero      String? @db.VarChar(10)
  complemento String? @db.VarChar(100)
  cidade      String? @db.VarChar(100)
  uf          UF?
  bairro      String? @db.VarChar(100)

  responsavelId    String    @map("responsavel_id")
  responsavel      Responsavel @relation(fields: [responsavelId], references: [id])
  
  moraComResponsavel Boolean @default(true) @map("mora_com_responsavel")
  
  criadoEm         DateTime  @default(now()) @map("criado_em")
  atualizadoEm     DateTime  @updatedAt @map("atualizado_em")
  ativo            Boolean   @default(true)
  matriculas       Matricula[]
  alunoResponsaveis AlunoResponsavel[]
  
  @@map("alunos")
}

model Usuario {
  id        String   @id @default(uuid())
  email     String   @unique @db.VarChar(255)
  senha     String   @db.VarChar(255) 
  nome      String   @db.VarChar(255)
  ativo     Boolean  @default(true)
  
  criadoEm     DateTime @default(now()) @map("criado_em")
  atualizadoEm DateTime @updatedAt @map("atualizado_em")
  ultimoLogin  DateTime? @map("ultimo_login")
  matriculas   Matricula[]
  
  @@map("usuarios")
}

model EmailVerification {
  id          String   @id @default(uuid())
  email       String   @db.VarChar(255)
  code        String   @db.VarChar(10)
  expiresAt   DateTime @map("expires_at")
  used        Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  usedAt      DateTime? @map("used_at")

  @@index([email])
  @@map("email_verifications")
}

model PasswordReset {
  id          String   @id @default(uuid())
  email       String   @db.VarChar(255)
  code        String   @db.VarChar(5)
  expiresAt   DateTime @map("expires_at")
  used        Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  usedAt      DateTime? @map("used_at")

  @@index([email])
  @@map("password_resets")
}
model Matricula {
  id             String           @id @default(uuid())
  codigo         String           @db.VarChar(30) @unique
  alunoId        String           @map("aluno_id")
  aluno          Aluno            @relation(fields: [alunoId], references: [id])
  responsavelId  String           @map("responsavel_id")
  responsavel    Responsavel      @relation(fields: [responsavelId], references: [id])
  usuarioId      String?          @map("usuario_id")
  usuario        Usuario?         @relation(fields: [usuarioId], references: [id])
  status         MatriculaStatus  @default(PENDENTE)
  responsavelNome   String?        @db.VarChar(255) @map("responsavel_nome")
  responsavelEmail  String?        @db.VarChar(255) @map("responsavel_email")
  responsavelCpf    String?        @db.VarChar(14)  @map("responsavel_cpf")
  alunoNome         String?        @db.VarChar(255) @map("aluno_nome")
  alunoCpf          String?        @db.VarChar(14)  @map("aluno_cpf")
  alunoGenero       Genero?        @map("aluno_genero")
  alunoDataNascimento DateTime?    @map("aluno_data_nascimento") @db.Date
  etapaAtual        Int            @default(1)       @map("etapa_atual")
  completo          Boolean        @default(false)
  pendenteEnderecoAluno Boolean    @default(false)   @map("pend_end_aluno")
  temSegundoResponsavel Boolean    @default(false)   @map("tem_segundo_responsavel")
  segundoResponsavelId  String?    @map("segundo_responsavel_id")
  segundoResponsavel    Responsavel? @relation("MatriculaSegundoResponsavel", fields: [segundoResponsavelId], references: [id])
  segundoResponsavelNome    String?   @db.VarChar(255) @map("segundo_responsavel_nome")
  segundoResponsavelEmail   String?   @db.VarChar(255) @map("segundo_responsavel_email")
  segundoResponsavelCelular String?   @db.VarChar(15)  @map("segundo_responsavel_celular")
  pendenteResp2Dados    Boolean     @default(false)   @map("pend_resp2_dados")
  pendenteResp2Endereco Boolean     @default(false)   @map("pend_resp2_endereco")
  criadoEm       DateTime         @default(now()) @map("criado_em")
  atualizadoEm   DateTime         @updatedAt @map("atualizado_em")

  @@map("matriculas")
  @@index([alunoId])
  @@index([responsavelId])
  @@index([usuarioId])
  @@index([segundoResponsavelId])
}

model AlunoResponsavel {
  id            String      @id @default(uuid())
  alunoId       String      @map("aluno_id")
  responsavelId String      @map("responsavel_id")
  tipoParentesco String     @map("tipo_parentesco") @db.VarChar(50) // "PAI", "MAE", "TUTOR", etc.
  responsavelFinanceiro Boolean @default(false) @map("responsavel_financeiro")
  responsavelDidatico   Boolean @default(false) @map("responsavel_didatico")
  
  aluno         Aluno       @relation(fields: [alunoId], references: [id], onDelete: Cascade)
  responsavel   Responsavel @relation(fields: [responsavelId], references: [id], onDelete: Cascade)
  
  criadoEm      DateTime    @default(now()) @map("criado_em")
  atualizadoEm  DateTime    @updatedAt @map("atualizado_em")
  
  @@unique([alunoId, responsavelId])
  @@map("aluno_responsaveis")
}
